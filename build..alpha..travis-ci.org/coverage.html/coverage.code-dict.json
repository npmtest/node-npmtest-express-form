{"/home/travis/build/npmtest/node-npmtest-express-form/test.js":"/* istanbul instrument in package npmtest_express_form */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-form/lib.npmtest_express_form.js":"/* istanbul instrument in package npmtest_express_form */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_form = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_form = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-form/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-form && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_form */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_form\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_form.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_form.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_form.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_form.__dirname + '/lib.npmtest_express_form.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-form/node_modules/express-form/index.js":"module.exports = require(\"./lib/form\");\n","/home/travis/build/npmtest/node-npmtest-express-form/node_modules/express-form/lib/form.js":"/*!\n * Express - Form\n * Copyright(c) 2010 Dan Dean <me@dandean.com>\n * MIT Licensed\n */\n\nvar async = require(\"async\")\n  , utils = require(\"./utils\")\n  , Field = require(\"./field\");\n\nfunction form() {\n  var routines = Array.prototype.slice.call(arguments)\n    , options = form._options;\n  \n  return function (req, res, next) {\n    var map = {}\n      , flashed = {}\n      , mergedSource = {};\n    \n    if (!req.form) req.form = {};\n    \n    options.dataSources.forEach(function (source) {\n      utils.merge(mergedSource, req[source]);\n    });\n    \n    if (options.passThrough) req.form = utils.clone(mergedSource);\n    \n    if (options.autoLocals) {\n      for (var prop in req.body) {\n        if (!Object.hasOwnProperty.call(req.body, prop)) continue;\n        \n        /*\n         * express 1.x and 3.x\n         * ------------------------\n         * res.locals.field = value\n         * \n         * express 2.x\n         * ------------------------\n         * res.local(field, value)\n         * res.locals({field: value});\n         */\n        if (typeof res.local === \"function\") {\n          // express 2.x\n          res.local(utils.camelize(prop), req.body[prop]);\n        } else {\n          // express 1.x and 3.x\n          if (!res.locals) res.locals = {};\n          res.locals[utils.camelize(prop)] = req.body[prop];\n        }\n      }\n    }\n    \n    Object.defineProperties(req.form, {\n      \"errors\": {\n        value: [],\n        enumerable: false\n      },\n      \"getErrors\": {\n        value: function (name) {\n          if(!name) return map;\n          \n          return map[name] || [];\n        },\n        enumerable: false\n      },\n      \"isValid\": {\n        get: function () {\n          return this.errors.length === 0;\n        },\n        enumerable: false\n      },\n      \"flashErrors\": {\n        value: function () {\n          if (typeof req.flash !== \"function\") return;\n          this.errors.forEach(function (error) {\n            if (flashed[error]) return;\n            \n            flashed[error] = true;\n            req.flash(\"error\", error);\n          });\n        },\n        enumerable: false\n      }\n    });\n    \n    //routines.forEach(function (routine) {\n    async.each(routines, function(routine, cb) {\n      routine.run(mergedSource, req.form, options, function(err, result) {\n        \n        // return early if no errors\n        if (!Array.isArray(result) || !result.length) return cb(null);\n        \n        var errors = req.form.errors = req.form.errors || []\n          , name = routine.name;\n      \n        map[name] = map[name] || [];\n      \n        result.forEach(function (error) {\n          errors.push(error);\n          map[name].push(error);\n        });\n        \n        cb(null);\n        \n      });\n    }, function(err) {\n      \n      if (options.flashErrors) req.form.flashErrors();\n      if (next) next();\n      \n    });\n  }\n}\n\nform.field = function (property, label) {\n  return new Field(property, label);\n};\n\nform.filter = form.validate = form.field;\n\nform._options = {\n  dataSources: [\"body\", \"query\", \"params\"],\n  autoTrim: false,\n  autoLocals: true,\n  passThrough: false,\n  flashErrors: true\n};\n\nform.configure = function (options) {\n  for (var p in options) {\n    if (!Array.isArray(options[p]) && p === \"dataSources\") {\n      options[p] = [options[p]];\n    }\n    this._options[p] = options[p];\n  }\n  return this;\n}\n\nmodule.exports = form;","/home/travis/build/npmtest/node-npmtest-express-form/node_modules/express-form/lib/utils.js":"// Convert square-bracket to dot notation.\nvar toDotNotation = exports.toDotNotation = function (str) {\n  return str.replace(/\\[((.)*?)\\]/g, \".$1\");\n};\n\n// Gets nested properties without throwing errors.\nvar getProp = exports.getProp = function (property, obj) {\n  var levels = toDotNotation(property).split(\".\");\n  \n  while (obj != null && levels[0]) {\n    obj = obj[levels.shift()];\n    if (obj == null) obj = \"\";\n  }\n  \n  return obj;\n}\n\n// Sets nested properties.\nvar setProp = exports.setProp = function (property, obj, value) {\n  var levels = toDotNotation(property).split(\".\");\n  \n  while (levels[0]) {\n    var p = levels.shift();\n    if (typeof obj[p] !== \"object\") obj[p] = {};\n    if (!levels.length) obj[p] = value;\n    obj = obj[p];\n  }\n  \n  return obj;\n}\n\nvar clone = exports.clone = function (obj) {\n  // Untested, probably better:-> return Object.create(obj).__proto__;\n  return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * camelize(str): -> String\n * - str (String): The string to make camel-case.\n *\n * Converts dash-separated words into camelCase words. Cribbed from Prototype.js.\n *\n * field-name -> fieldName\n * -field-name -> FieldName\n**/\nvar camelize = exports.camelize = function (str) {\n  return (str || \"\").replace(/-+(.)?/g, function(match, chr) {\n    return chr ? chr.toUpperCase() : '';\n  });\n}\n\n/*\n * Recursively merge properties of two objects\n * http://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically/383245#383245\n */\nvar merge = exports.merge = function (obj1, obj2) {\n  for (var p in obj2) {\n    try {\n      // Property in destination object set; update its value.\n      if ( obj2[p].constructor==Object ) {\n        obj1[p] = merge(obj1[p], obj2[p]);\n      } else {\n        obj1[p] = obj2[p];\n      }\n    } catch (e) {\n      // Property in destination object not set; create it and set its value.\n      obj1[p] = obj2[p];\n    }\n  }\n  return obj1;\n}\n\nvar hasValue = exports.hasValue = function (value) {\n  return !(undefined === value || null === value || \"\" === value);\n}","/home/travis/build/npmtest/node-npmtest-express-form/node_modules/express-form/lib/field.js":"var validator = require(\"validator\")\n  , FilterPrototype = validator.Filter.prototype\n  , ValidatorPrototype = validator.Validator.prototype\n  , externalFilter = new validator.Filter()\n  , externalValidator = new validator.Validator()\n  , object = require(\"object-additions\").object\n  , async = require(\"async\")\n  , utils = require(\"./utils\");\n\nfunction Field(property, label) {\n  var stack = []\n    , isArray = false\n    , fieldLabel = label || property;\n\n  this.name = property;\n  this.__required = false;\n  this.__trimmed = false;\n\n  this.add = function(func) {\n    stack.push(func);\n    return this;\n  };\n\n  this.array = function() {\n    isArray = true;\n    return this;\n  };\n\n  this.run = function (source, form, options, cb) {\n    var self = this\n      , errors = []\n      , value = utils.getProp(property, form) || utils.getProp(property, source);\n\n    if (options.autoTrim && !self.__trimmed) {\n      self.__trimmed = true;\n      stack.unshift(function (value) {\n        if (object.isString(value)) {\n          return FilterPrototype.trim.apply(externalFilter.sanitize(value));\n        }\n        return value;\n      });\n    }\n\n    function runStack(foo, cb) {\n\n      async.eachSeries(stack, function(proc, cb) {\n\n        if (proc.length == 3) {\n          // run the async validator/filter\n          return proc(foo, source, function(err, result) {\n            if (err) {\n              errors.push(err.message.replace(\"%s\", fieldLabel));\n              return cb(null);\n            }\n\n            // filters return values\n            if (result != null) {\n              foo = result\n            }\n\n            cb(null);\n\n          });\n        }\n\n        // run the sync validator/filter\n        var result = proc(foo, source);\n        if (result.valid) return cb(null);\n        if (result.error) {\n          // If this field is not required and it doesn't have a value, ignore error.\n          if (!utils.hasValue(value) && !self.__required) return cb(null);\n\n          errors.push(result.error.replace(\"%s\", fieldLabel));\n          return cb(null);\n        }\n        foo = result;\n        cb(null);\n\n      }, function(err) {\n        cb(null, foo);\n      });\n    }\n\n    if (isArray) {\n      if (!utils.hasValue(value)) value = [];\n      if (!Array.isArray(value)) value = [value];\n      async.mapSeries(value, runStack, function(err, value) {\n        utils.setProp(property, form, value);\n        cb(null, errors);\n      });\n\n\n    } else {\n      if (Array.isArray(value)) value = value[0];\n      runStack(value, function(err, value) {\n        utils.setProp(property, form, value);\n        cb(null, errors);\n      });\n    }\n  };\n}\n\n// ARRAY METHODS\n\nField.prototype.array = function () {\n  return this.array();\n};\n\nField.prototype.arrLength = function (from, to) {\n  return this.add(function (arr) {\n    if (value.length < from) {\n      return { error: message || e.message || \"%s is too short\" };\n    }\n    if (value.length > to) {\n      return { error: message || e.message || \"%s is too long\" };\n    }\n    return { valid: true };\n  });\n}\n\n// HYBRID METHODS\n\nField.prototype.custom = function(func, message) {\n\n  // custom function is async\n  if (func.length == 3) {\n    return this.add(function(value, source, cb) {\n      func(value, source, function(err, result) {\n        if (err) return cb(new Error(message || err.message || \"%s is invalid\"));\n\n        // functions that return values are filters\n        if (result != null) return cb(null, result);\n\n        // value passed validator\n        cb(null, null);\n      });\n    });\n  }\n\n  // custom function is sync\n  return this.add(function (value, source) {\n\n    try {\n      var result = func(value, source);\n    } catch (e) {\n      return { error: message || e.message || \"%s is invalid\" };\n    }\n    // Functions that return values are filters.\n    if (result != null) return result;\n\n    // value passed validator\n    return { valid: true };\n\n  });\n};\n\n// FILTER METHODS\n\nObject.keys(FilterPrototype).forEach(function (name) {\n  if (name.match(/^ifNull$/)) return;\n\n  Field.prototype[name] = function () {\n    var args = arguments;\n    return this.add(function (value) {\n      var a = FilterPrototype[name].apply(externalFilter.sanitize(value), args);\n      return a;\n    });\n  };\n});\n\nField.prototype.ifNull = function (replacement) {\n  return this.add(function (value) {\n    if (object.isUndefined(value) || null === value || '' === value) {\n      return replacement;\n    }\n    return value;\n  });\n};\n\nField.prototype.toUpper = Field.prototype.toUpperCase = function () {\n  return this.add(function (value) {\n    return value.toString().toUpperCase();\n  });\n};\n\nField.prototype.toLower = Field.prototype.toLowerCase = function () {\n  return this.add(function (value) {\n    return value.toString().toLowerCase();\n  });\n};\n\nField.prototype.truncate = function (length) {\n  return this.add(function (value) {\n    value = value.toString();\n    if (value.length <= length) {\n      return value;\n    }\n\n    if (length <= 3) return \"...\";\n\n    if (value.length > length - 3) {\n      return value.substr(0,length - 3) + \"...\";\n    }\n\n    return value;\n  });\n};\n\nField.prototype.customFilter = function (func) {\n  return this.add(func);\n};\n\n// VALIDATE METHODS\n\nvar MESSAGES = {\n  isDate: \"%s is not a date\",\n  isUrl: \"%s is not a URL\",\n  isIP: \"%s is not an IP address\",\n  isAlpha: \"%s contains non-letter characters\",\n  isAlphanumeric: \"%s contains non alpha-numeric characters\",\n  isNumeric: \"%s is not numeric\",\n  isLowercase: \"%s contains uppercase letters\",\n  isUppercase: \"%s contains lowercase letters\",\n  isInt: \"%s is not an integer\",\n  notEmpty: \"%s has no value or is only whitespace\"\n};\n\nObject.keys(ValidatorPrototype).forEach(function (name) {\n  if (name.match(/^(contains|notContains|equals|check|validate|assert|error|len|isNumeric|isDecimal|isEmail|isFloat|regex|notRegex|is|not|notNull|isNull)$/)) {\n    return;\n  }\n\n  Field.prototype[name] = function (message) {\n    var args = arguments;\n    message = message || MESSAGES[name];\n\n    return this.add(function(value) {\n      try {\n        ValidatorPrototype[name].apply(externalValidator.check(value, message), args);\n      } catch (e) {\n        return { error: e.message || e.toString() };\n      }\n      return { valid: true };\n    });\n  };\n});\n\nField.prototype.contains = function (test, message) {\n  return this.add(function(value) {\n    try {\n      ValidatorPrototype.contains.call(externalValidator.check(value, message), test);\n    } catch (e) {\n      return { error: message || \"%s does not contain required characters\" };\n    }\n    return { valid: true };\n  });\n};\n\nField.prototype.notContains = function (test, message) {\n  return this.add(function (value) {\n    try {\n      ValidatorPrototype.notContains.call(externalValidator.check(value, message), test);\n    } catch (e) {\n      return { error: message || \"%s contains invalid characters\" };\n    }\n    return { valid: true };\n  });\n};\n\n\nField.prototype.equals = function (other, message) {\n  if (object.isString(other) && other.match(/^field::/)) {\n    this.__required = true;\n  }\n\n  return this.add(function (value, source) {\n    // If other is a field token (field::fieldname), grab the value of fieldname\n    // and use that as the OTHER value.\n    var test = other;\n    if (object.isString(other) && other.match(/^field::/)) {\n      test = utils.getProp(other.replace(/^field::/, \"\"), source);\n    }\n    if (value != test) {\n      return { error: message || \"%s does not equal \" + String(test) };\n    }\n    return { valid: true };\n  });\n};\n\n// node-validator's numeric validator seems unintuitive. All numeric values should be valid, not just int.\nField.prototype.isNumeric = function (message) {\n  return this.add(function (value) {\n    if (object.isNumber(value) || (object.isString(value) && value.match(/^[-+]?[0-9]*\\.?[0-9]+$/))) {\n    } else {\n      return { error: message || \"%s is not a number\" };\n    }\n    return { valid: true };\n  });\n};\n\n// node-validator's decimal/float validator incorrectly thinks Ints are valid.\nField.prototype.isFloat = Field.prototype.isDecimal = function (message) {\n  return this.add(function (value) {\n    if ((object.isNumber(value) && value % 1 == 0) || (object.isString(value) && value.match(/^[-+]?[0-9]*\\.[0-9]+$/))) {\n    } else {\n      return { error: message || \"%s is not a decimal\" };\n    }\n    return { valid: true };\n  });\n};\n\n// super simple email validation\nField.prototype.isEmail = function (message) {\n  return this.add(function (value) {\n    if (typeof value != 'string' || !(/^[\\-0-9a-zA-Z\\.\\+_]+@[\\-0-9a-zA-Z\\.\\+_]+\\.[a-zA-Z]{2,}$/).test(value)) {\n      return { error: message || \"%s is not an email address\" };\n    }\n    return { valid: true };\n  });\n};\n\nField.prototype.isString = function (message) {\n  return this.add(function (value) {\n    if (!object.isString(value)) {\n      return { error: message || \"%s is not a string\" };\n    }\n    return { valid: true };\n  });\n};\n\nField.prototype.regex = Field.prototype.is = function (pattern, modifiers, message) {\n  // regex(/pattern/)\n  // regex(/pattern/, \"message\")\n  // regex(\"pattern\")\n  // regex(\"pattern\", \"modifiers\")\n  // regex(\"pattern\", \"message\")\n  // regex(\"pattern\", \"modifiers\", \"message\")\n\n  if (pattern instanceof RegExp) {\n    if (object.isString(modifiers) && modifiers.match(/^[gimy]+$/)) {\n      throw new Error(\"Invalid arguments: `modifiers` can only be passed in if `pattern` is a string.\");\n    }\n\n    message = modifiers;\n    modifiers = undefined;\n\n  } else if (object.isString(pattern)) {\n    if (arguments.length == 2 && !modifiers.match(/^[gimy]+$/)) {\n      // 2nd arg doesn't look like modifier flags, it's the message (might also be undefined)\n      message = modifiers;\n      modifiers = undefined;\n    }\n    pattern = new RegExp(pattern, modifiers);\n  }\n\n  return this.add(function (value) {\n    if (pattern.test(value) === false) {\n      return { error: message || \"%s has invalid characters\" };\n    }\n    return { valid: true };\n  });\n};\n\nField.prototype.notRegex = Field.prototype.not = function(pattern, modifiers, message) {\n  // notRegex(/pattern/)\n  // notRegex(/pattern/, \"message\")\n  // notRegex(\"pattern\")\n  // notRegex(\"pattern\", \"modifiers\")\n  // notRegex(\"pattern\", \"message\")\n  // notRegex(\"pattern\", \"modifiers\", \"message\")\n\n  if (pattern instanceof RegExp) {\n    if (object.isString(modifiers) && modifiers.match(/^[gimy]+$/)) {\n      throw new Error(\"Invalid arguments: `modifiers` can only be passed in if `pattern` is a string.\");\n    }\n\n    message = modifiers;\n    modifiers = undefined;\n\n  } else if (object.isString(pattern)) {\n    if (arguments.length == 2 && !modifiers.match(/^[gimy]+$/)) {\n      // 2nd arg doesn't look like modifier flags, it's the message (might also be undefined)\n      message = modifiers;\n      modifiers = undefined;\n    }\n    pattern = new RegExp(pattern, modifiers);\n  }\n\n  return this.add(function(value) {\n    if (pattern.test(value) === true) {\n      return { error: message || \"%s has invalid characters\" };\n    }\n    return { valid: true };\n  });\n};\n\nField.prototype.required = function (placeholderValue, message) {\n  this.__required = true;\n  return this.add(function (value) {\n    if (!utils.hasValue(value) || value == placeholderValue) {\n      return { error: message || \"%s is required\" };\n    }\n    return { valid: true };\n  });\n};\n\nField.prototype.minLength = function (length, message) {\n  return this.add(function(value) {\n    if (value.toString().length < length) {\n      return { error: message || \"%s is too short\" };\n    }\n    return { valid: true };\n  });\n};\n\nField.prototype.maxLength = function (length, message) {\n  return this.add(function(value) {\n    if (value.toString().length > length) {\n      return { error: message || \"%s is too long\" };\n    }\n    return { valid: true };\n  });\n};\n\nField.prototype.customValidator = function(func, message) {\n  return this.add(function(value, source) {\n    try {\n      func(value, source);\n    } catch (e) {\n      return { error: message || e.message || \"%s is invalid\" };\n    }\n    return { valid: true };\n  });\n};\n\nmodule.exports = Field;\n"}